{
	"info": {
		"_postman_id": "2b739898-f456-4893-955b-26ada3947c05",
		"name": "ServeRest",
		"description": "O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.  \nNessa coleção serão realizados testes de caixa preta, a fim de identificar falhas funcionais na aplicação.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44430224"
	},
	"item": [
		{
			"name": "Testes Login",
			"item": [
				{
					"name": "CT001 - Login de usuário com credenciais válidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Trecho para salvar o Token de acesso em uma variável de ambiente chamada \"access_token\"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.authorization) {\r",
									"    var token = jsonData.authorization.replace(/^Bearer\\s+/i, '');\r",
									"    pm.environment.set(\"access_token\", token);\r",
									"}\r",
									"\r",
									"// Testes\r",
									"pm.test('Verifica se o status code é igual a 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade authorization', function () {\r",
									"    pm.expect(jsonData).to.have.property('authorization');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se é retornada uma mensagem de login realizado com sucesso', function () {\r",
									"    pm.expect(jsonData).to.have.property('message', 'Login realizado com sucesso');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se a propriedade authorization não está vazia', function () {\r",
									"    pm.expect(jsonData.authorization).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Teste de tipagem\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"email\", \"password\"],\r",
									"    properties: {\r",
									"        email: { type: \"string\" },\r",
									"        password: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"let body = pm.request.body.raw;\r",
									"body = JSON.parse(body);\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(body);\r",
									"\r",
									"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Cria o usuário caso não exista\r",
									"const usuario_cadastro = {\r",
									"  \"nome\": \"Teste API 1\",\r",
									"  \"email\": \"usuarioteste@teste.com\",\r",
									"  \"password\": \"teste\",\r",
									"  \"administrador\": \"false\"\r",
									"}\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `https://compassuol.serverest.dev/usuarios`,\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
									"    }\r",
									"}, (errGet, resGet) => {\r",
									"    if (errGet) {\r",
									"        return;\r",
									"    }\r",
									"    const listaUsuarios = resGet.json().usuarios || [];\r",
									"    const usuarioExistente = listaUsuarios.find(u => u.email === usuarioExistente.email);\r",
									"\r",
									"    if (usuarioExistente) {\r",
									"        pm.environment.set(\"_id_usuario_cadastro\", usuarioExistente._id);\r",
									"    } else {\r",
									"        pm.sendRequest({\r",
									"            url: `https://compassuol.serverest.dev/usuarios`,\r",
									"            method: 'POST',\r",
									"            header: { \r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify(usuario_cadastro)\r",
									"            }\r",
									"        }, (errPost, resPost) => {\r",
									"            if (errPost) {\r",
									"                return;\r",
									"            }\r",
									"            const resposta = resPost.json();\r",
									"            if (resposta._id) {\r",
									"                pm.environment.set(\"_id_usuario_cadastro\", resposta._id);\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuarioteste@teste.com\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT001 - Login de usuário administrador com credenciais válidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Trecho para salvar o Token de acesso em uma variável de ambiente chamada \"access_token_adm\"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.authorization) {\r",
									"    var token = jsonData.authorization.replace(/^Bearer\\s+/i, '');\r",
									"    pm.environment.set(\"access_token_adm\", token);\r",
									"}\r",
									"\r",
									"// Testes\r",
									"pm.test('Verifica se o status code é igual a 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade authorization', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('authorization');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se é retornada uma mensagem de login realizado com sucesso', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message', 'Login realizado com sucesso');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se a propriedade authorization não está vazia', function () {\r",
									"    pm.expect(pm.response.json().authorization).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Teste de tipagem\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"email\", \"password\"],\r",
									"    properties: {\r",
									"        email: { type: \"string\" },\r",
									"        password: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"let body = pm.request.body.raw;\r",
									"body = JSON.parse(body);\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(body);\r",
									"\r",
									"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Cria o usuário caso não exista\r",
									"const usuario_cadastro_adm = {\r",
									"  \"nome\": \"Teste API 2\",\r",
									"  \"email\": \"usuarioadm@teste.com\",\r",
									"  \"password\": \"teste\",\r",
									"  \"administrador\": \"true\"\r",
									"}\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `https://compassuol.serverest.dev/usuarios`,\r",
									"    method: 'GET',\r",
									"    header: { \r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
									"    }\r",
									"}, (errGet, resGet) => {\r",
									"    if (errGet) {\r",
									"        return;\r",
									"    }\r",
									"    const listaUsuarios = resGet.json().usuarios || [];\r",
									"    const usuarioExistente = listaUsuarios.find(u => u.email === usuarioExistente.email);\r",
									"\r",
									"    if (usuarioExistente) {\r",
									"        pm.environment.set(\"_id_usuario_cadastro_adm\", usuarioExistente._id);\r",
									"    } else {\r",
									"        pm.sendRequest({\r",
									"            url: `https://compassuol.serverest.dev/usuarios`,\r",
									"            method: 'POST',\r",
									"            header: { \r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify(usuario_cadastro_adm)\r",
									"            }\r",
									"        }, (errPost, resPost) => {\r",
									"            if (errPost) {\r",
									"                return;\r",
									"            }\r",
									"            const resposta = resPost.json();\r",
									"            if (resposta._id) {\r",
									"                pm.environment.set(\"_id_usuario_cadastro_adm\", resposta._id);\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuarioadm@teste.com\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT002 - Login de usuário não cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verifica se o status code é igual a 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta não possui a propriedade authorization', function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property('authorization');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se é retornada uma mensagem de erro para email ou senha inválidos', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message', 'Email e/ou senha inválidos');\r",
									"});\r",
									"\r",
									"// Teste de tipagem\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"email\", \"password\"],\r",
									"    properties: {\r",
									"        email: { type: \"string\" },\r",
									"        password: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"let body = pm.request.body.raw;\r",
									"body = JSON.parse(body);\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(body);\r",
									"\r",
									"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT003 - Login de usuário com senha errada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verifica se o status code é igual a 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta não possui a propriedade authorization', function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property('authorization');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se é retornada uma mensagem de erro para email ou senha inválidos', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message', 'Email e/ou senha inválidos');\r",
									"});\r",
									"\r",
									"// Teste de tipagem\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"email\", \"password\"],\r",
									"    properties: {\r",
									"        email: { type: \"string\" },\r",
									"        password: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"let body = pm.request.body.raw;\r",
									"body = JSON.parse(body);\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(body);\r",
									"\r",
									"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"usuarioteste@teste.com\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT003 - Login de usuário com email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verifica se o status code é igual a 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta não possui a propriedade authorization', function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property('authorization');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se é retornada uma mensagem de erro para email ou senha inválidos', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message', 'Email e/ou senha inválidos');\r",
									"});\r",
									"\r",
									"// Teste de tipagem\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"email\", \"password\"],\r",
									"    properties: {\r",
									"        email: { type: \"string\" },\r",
									"        password: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"let body = pm.request.body.raw;\r",
									"body = JSON.parse(body);\r",
									"\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(body);\r",
									"\r",
									"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT004 - Login de usuário com credenciais vazias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verifica se o status code é igual a 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta possui a propriedade email ou password', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('email' || 'password');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se o corpo da resposta não possui a propriedade authorization', function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.property('authorization');\r",
									"});\r",
									"\r",
									"pm.test('Verifica se é retornada uma mensagem de erro para os campos vazios', function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('email' || 'password', 'email não pode ficar em branco' || 'password não pode ficar em branco');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "## **US 002: \\[API\\] Login**\n\nSendo um vendedor de uma loja com cadastro já realizado  \nGostaria de poder me autenticar no Marketplace da ServeRest  \nPara poder cadastrar, editar, atualizar e excluir meus produtos\n\n**DoR**\n\n- Banco de dados e infraestrutura para desenvolvimento disponibilizados;\n    \n- API de cadastro de usuários implementada;\n    \n- Ambiente de testes disponibilizado.\n    \n\n**DoD**\n\n- Autenticação com geração de token Bearer implementada;\n    \n- Análise de testes cobrindo a rota de login;\n    \n- Matriz de rastreabilidade atPOSualizada;\n    \n- Automação de testes baseado na análise realizada;\n    \n\n**Acceptance Criteria**\n\n- Usuários não cadastrados não deverão conseguir autenticar;\n    \n- Usuários com senha inválida não deverão conseguir autenticar;\n    \n- No caso de não autenticação, deverá ser retornado um status code 401 (Unauthorized);\n    \n- Usuários existentes e com a senha correta deverão ser autenticados;\n    \n- A autenticação deverá gerar um token Bearer;\n    \n- A duração da validade do token deverá ser de 10 minutos;\n    \n- Os testes executados deverão conter evidências;\n    \n- A cobertura de testes deve se basear no Swagger e ir além, cobrindo cenários alternativos."
		},
		{
			"name": "Testes Usuários",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "CT005 - Cadastro de usuário com dados válidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@icloud.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT006 - Cadastro de usuário com campos vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade nome ou email ou password ou administrador', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'email' || 'password' || 'administrador');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para os campos vazios', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'email' || 'password' || 'administrador', 'nome não pode ficar em branco' || 'email não pode ficar em branco' || 'password não pode ficar em branco' || 'administrador não pode ficar em branco');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário não foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 400);\r",
											"        done();\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT007 - Cadastro de usuário com e-mail já utilizado por outro usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um email de um usuário para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const emailAleatorio = listaUsuarios[indiceAleatorio].email;\r",
											"        pm.environment.set(\"email_usuario_para_manipular\", emailAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para email já utilizado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Este email já está sendo usado');\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário não foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 400);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{email_usuario_para_manipular}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT008 - Cadastro de usuário com e-mail de provedor Gmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@gmail.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT008 - Cadastro de usuário com e-mail de provedor Hotmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@hotmail.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT009 - Cadastro de usuário com formatação inválida de e-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade email', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se exibe mensagem de erro para email inválido', function () {\r",
											"    pm.expect(pm.response.text()).to.include('email deve ser um email válido');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomUserName}}hotmailcom\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT010 - Cadastro de usuário com senha de 5 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12345\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT010 - Cadastro de usuário com senha de 6 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"123456\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT010 - Cadastro de usuário com senha de 9 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12345789\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT010 - Cadastro de usuário com senha de 10 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuário foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const usuarioId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usuarioId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234567891\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT011 - Cadastro de usuário com senha de 4 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade password', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('password');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT012 - Cadastro de usuário com senha de 11 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade password', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('password');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"12345678912\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "CT013 - Edição de usuário com dados válidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de registro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Registro alterado com sucesso');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@teste.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT014 - Edição de usuário com campos vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade nome ou email ou password ou administrador', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'email' || 'password' || 'administrador');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para os campos vazios', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'email' || 'password' || 'administrador', 'nome não pode ficar em branco' || 'email não pode ficar em branco' || 'password não pode ficar em branco' || 'administrador não pode ficar em branco');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT015 - Edição de usuário com e-mail já utilizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para email já utilizado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Este email já está sendo usado');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um email e um id de um usuário para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    let indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const emailAleatorio = listaUsuarios[indiceAleatorio].email;\r",
											"        pm.environment.set(\"email_usuario_para_manipular\", emailAleatorio);\r",
											"    indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{email_usuario_para_manipular}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT016 - Edição de usuário não cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o produto foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const produtoId = pm.environment.get(\"_id_produto_para_manipular\");\r",
											"    let body = pm.request.body.raw;\r",
											"    body = JSON.parse(body);\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/produtos/${produtoId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@icloud.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{idRandom}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{idRandom}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT017 - Edição de usuário com e-mail de provedor Gmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@gmail.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT017 - Edição de usuário com e-mail de provedor Hotmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@hotmail.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT018 - Edição de usuário  com formatação inválida de e-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade email', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se exibe mensagem de erro para email inválido', function () {\r",
											"    pm.expect(pm.response.text()).to.include('email deve ser um email válido');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}.com.br\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT019 - Edição de usuário  com senha de 7 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de registro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Registro alterado com sucesso');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@teste.com\",\r\n  \"password\": \"t3st389\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT020 - Edição de usuário  com senha de 2 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade password', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('password');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@icloud.com\",\r\n  \"password\": \"t1\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT021 - Edição de usuário  com senha de 15 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade password', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('password');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"email\", \"password\", \"administrador\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        email: { type: \"string\" },\r",
											"        password: { type: \"string\" },\r",
											"        administrador: { type: \"string\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um usuario para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaUsuarios = jsonData.usuarios; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaUsuarios.length);\r",
											"    const idAleatorio = listaUsuarios[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_usuario_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@icloud.com\",\r\n  \"password\": \"teste@#$1234567\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT022 - Edição de usuário com parâmetro de _id vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}@teste.com\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/usuarios/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "CT025 - Busca de usuários como usuário não administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro de rota exclusiva para administradores', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Rota exclusiva para administradores');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/usuarios",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "CT029 - Exclusão de usuário com parâmetro de _id válido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastra um usuário para excluir (caso ele não exista)\r",
											"const usuario_para_excluir = {\r",
											"  \"nome\": \"Teste\",\r",
											"  \"email\": \"testelivia@teste.com\",\r",
											"  \"password\": \"teste123\",\r",
											"  \"administrador\": \"true\"\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/usuarios`,\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
											"    }\r",
											"}, (errGet, resGet) => {\r",
											"    if (errGet) {\r",
											"        return;\r",
											"    }\r",
											"    const listaUsuarios = resGet.json().usuarios || [];\r",
											"    const usuarioExistente = listaUsuarios.find(p => p.nome === usuario_para_excluir.email);\r",
											"\r",
											"    if (usuarioExistente) {\r",
											"        pm.environment.set(\"_id_usuario_para_excluir\", usuarioExistente._id);\r",
											"    } else {\r",
											"        pm.sendRequest({\r",
											"            url: `https://compassuol.serverest.dev/usuarios`,\r",
											"            method: 'POST',\r",
											"            header: { \r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(usuario_para_excluir)\r",
											"            }\r",
											"        }, (errPost, resPost) => {\r",
											"            if (errPost) {\r",
											"                return;\r",
											"            }\r",
											"            const resposta = resPost.json();\r",
											"            if (resposta._id) {\r",
											"                pm.environment.set(\"_id_usuario_para_excluir\", resposta._id);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de registro excluído com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Registro excluído com sucesso');\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o usuario foi excluído chamando o endpoint GET\", function (done) {\r",
											"    const usaurioId = pm.environment.get(\"_id_usuario_para_excluir\");\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/usuarios/${usaurioId}`,\r",
											"        method: 'GET',\r",
											"        header: { \r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${pm.environment.get('access_token_adm')}`\r",
											"        }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 400);\r",
											"        pm.expect(res.json()).to.have.property('message', 'Usuário não encontrado');\r",
											"        done();\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_para_excluir}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_para_excluir}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT030 - Exclusão de usuário com carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Faz login de usuário com carrinho\r",
											"pm.sendRequest({\r",
											"    url: 'https://compassuol.serverest.dev/login',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: \"usuariocarrinho@teste.com\",\r",
											"            password: \"teste\"\r",
											"        })\r",
											"    }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return\r",
											"    }\r",
											"    pm.environment.set(\"access_token_carrinho\", res.json().access_token);\r",
											"})\r",
											"\r",
											"// Lógica para salvar um id de um usuário vinculado a um carrinho para manipular\r",
											"pm.sendRequest({\r",
											"    url: 'https://compassuol.serverest.dev/carrinhos/HD4RKeRAc4F697tg',\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"access_token_carrinho\")}`\r",
											"    }\r",
											"}, (err, res) => {\r",
											"    const jsonData = res.json();\r",
											"    idUsuario = jsonData.idUsuario;\r",
											"    pm.environment.set(\"_id_usuario_carrinho_para_manipular\", idUsuario);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para tentativa de exclusão de usuário vinculado a um carrinho', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Não é permitido excluir usuário com carrinho cadastrado');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade idCarrinho', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('idCarrinho');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade idCarrinho não está vazia', function () {\r",
											"    pm.expect(pm.response.json().idCarrinho).to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_carrinho}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/usuarios/{{_id_usuario_carrinho_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{_id_usuario_carrinho_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT031 - Exclusão de usuário com parâmetro de _id vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/usuarios/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CT032 - Exclusão de usuário com parâmetro de _id  inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para usuário não encontrado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Nenhum registro excluído');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/usuarios/{{idRandom}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"usuarios",
										"{{idRandom}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "## **US 001 - \\[API\\] Usuários**\n\nSendo um vendedor de uma loja  \nGostaria de poder me cadastrar no Marketplace do ServeRest  \nPara poder realizar as vendas dos meus produtos\n\n**DoR**\n\n- Banco de dados e infraestrutura para desenvolvimento disponibilizados;\n    \n- Ambiente de testes disponibilizado.\n    \n\n**DoD**\n\n- CRUD de cadastro de vendedores (usuários) implementado (CRIAR, ATUALIZAR, LISTAR E DELETAR);\n    \n- Análise de testes cobrindo todos verbos;\n    \n- Matriz de rastreabilidade atualizada;\n    \n- Automação de testes baseado na análise realizada;\n    \n\n**Acceptance Criteria**\n\n- Os vendedores (usuários) deverão possuir os campos NOME, E-MAIL, PASSWORD e ADMINISTRADOR;\n    \n- Não deverá ser possível fazer ações e chamadas para usuários inexistentes;\n    \n- Não deve ser possível criar um usuário com e-mail já utilizado;\n    \n- Caso não seja encontrado usuário com o ID informado no PUT, um novo usuário deverá ser criado;\n    \n- Não deve ser possível cadastrar usuário com e-mail já utilizado utilizando PUT;\n    \n- Os testes executados deverão conter evidências;\n    \n- Não deverá ser possível cadastrar usuários com e-mails de provedor gmail e hotmail;\n    \n- Os e-mails devem seguir um padrão válido de e-mail para o cadastro;\n    \n- As senhas devem possuír no mínimo 5 caracteres e no máximo 10 caracteres;\n    \n- A cobertura de testes deve se basear no Swagger e ir além, cobrindo cenários alternativos."
		},
		{
			"name": "Testes Produtos",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "CT033 - Cadastro de produto com dados válidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o produto foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const produtoId = pm.response.json()._id;\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/produtos/${produtoId}`,\r",
											"        method: 'GET',\r",
											"        header: { \r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}` \r",
											"            }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT034 - Cadastro de produto como usuário não autenticado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para usuário não autenticado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT035 - Cadastro de produto como usuário não administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro de rota exclusiva para administradores', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Rota exclusiva para administradores');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT036 - Cadastro de produto com nome já utilizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para nome de produto já existente', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Já existe produto com esse nome');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um nome de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const nomeAleatorio = listaProdutos[indiceAleatorio].nome;\r",
											"        pm.environment.set(\"nome_produto_para_manipular\", nomeAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nome_produto_para_manipular}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT037 - Cadastro de produto com campos vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade nome ou preço ou descrição ou quantidade', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'preco' || 'descricao' || 'quantidade');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para os campos vazios', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'preco' || 'descricao' || 'quantidade', 'nome não pode ficar em branco' || 'preco não pode ficar em branco' || 'descricao não pode ficar em branco' || 'quantidade não pode ficar em branco');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": null,\r\n  \"descricao\": \"\",\r\n  \"quantidade\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "CT038 - Edição de produto com dados válidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de registro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Registro alterado com sucesso');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT039 - Edição de  produto com campos vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade nome ou preço ou descrição ou quantidade', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'preco' || 'descricao' || 'quantidade');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para os campos vazios', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('nome' || 'preco' || 'descricao' || 'quantidade', 'nome não pode ficar em branco' || 'preco não pode ficar em branco' || 'descricao não pode ficar em branco' || 'quantidade não pode ficar em branco');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": null,\r\n  \"descricao\": \"\",\r\n  \"quantidade\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT040 - Edição de produto como usuário não autenticado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para usuário não autenticado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT041 - Edição de produto como usuário não administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro de rota exclusiva para administradores', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Rota exclusiva para administradores');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT042 - Edição de produto com nome já utilizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para nome de produto já existente', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Já existe produto com esse nome');\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nome_produto_para_manipular}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT043 - Edição de produto não cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucessoo', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o produto foi cadastrado chamando o endpoint GET\", function (done) {\r",
											"    const produtoId = pm.environment.get(\"_id_produto_para_manipular\");\r",
											"    let body = pm.request.body.raw;\r",
											"    body = JSON.parse(body);\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/produtos/${produtoId}`,\r",
											"        method: 'GET',\r",
											"        header: { 'Content-Type': 'application/json' }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 200);\r",
											"        done();\r",
											"    });\r",
											"});\r",
											"\r",
											"// Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"nome\", \"preco\", \"descricao\", \"quantidade\"],\r",
											"    properties: {\r",
											"        nome: { type: \"string\" },\r",
											"        preco: { type: \"integer\" },\r",
											"        descricao: { type: \"string\" },\r",
											"        quantidade: { type: \"integer\" }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/{{idRandom}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{idRandom}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT044 - Edição de produto com parâmetro de _id vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"teste\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/produtos/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "CT052 - Exclusão de produto com parâmetro de _id válido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastra um produto para excluir (caso ele não exista)\r",
											"const produto_para_excluir = {\r",
											"  \"nome\": \"Produto para excluir\",\r",
											"  \"preco\": 200,\r",
											"  \"descricao\": \"para teste\",\r",
											"  \"quantidade\": 20\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
											"    }\r",
											"}, (errGet, resGet) => {\r",
											"    if (errGet) {\r",
											"        return;\r",
											"    }\r",
											"    const listaProdutos = resGet.json().produtos || [];\r",
											"    const produtoExistente = listaProdutos.find(p => p.nome === produto_para_excluir.nome);\r",
											"\r",
											"    if (produtoExistente) {\r",
											"        pm.environment.set(\"_id_produto_para_excluir\", produtoExistente._id);\r",
											"    } else {\r",
											"        pm.sendRequest({\r",
											"            url: `https://compassuol.serverest.dev/produtos`,\r",
											"            method: 'POST',\r",
											"            header: { \r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(produto_para_excluir)\r",
											"            }\r",
											"        }, (errPost, resPost) => {\r",
											"            if (errPost) {\r",
											"                return;\r",
											"            }\r",
											"            const resposta = resPost.json();\r",
											"            if (resposta._id) {\r",
											"                pm.environment.set(\"_id_produto_para_excluir\", resposta._id);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de registro excluído  com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Registro excluído com sucesso');\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se o produto foi excluído chamando o endpoint GET\", function (done) {\r",
											"    const produtoId = pm.environment.get(\"_id_produto_para_excluir\");\r",
											"    pm.sendRequest({\r",
											"        url: `https://compassuol.serverest.dev/produtos/${produtoId}`,\r",
											"        method: 'GET',\r",
											"        header: { \r",
											"            'Content-Type': 'application/json',\r",
											"            'Authorization': `Bearer ${pm.environment.get('access_token_adm')}`\r",
											"        }\r",
											"    }, (err, res) => {\r",
											"        pm.expect(res).to.have.property('code', 400);\r",
											"        pm.expect(res.json()).to.have.property('message', 'Produto não encontrado');\r",
											"        done();\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_excluir}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_excluir}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT053 - Exclusão de produto que faz parte de carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto no carrinho para manipular\r",
											"pm.sendRequest({\r",
											"    url: 'https://compassuol.serverest.dev/carrinhos',\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    const jsonData = res.json();\r",
											"    const listaCarrinhos = jsonData.carrinhos;\r",
											"\r",
											"    if (!listaCarrinhos || listaCarrinhos.length === 0) {\r",
											"        return;\r",
											"    }\r",
											"    const carrinhoAleatorio = listaCarrinhos[Math.floor(Math.random() * listaCarrinhos.length)];\r",
											"    const listaProdutos = carrinhoAleatorio.produtos;\r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio].idProduto;\r",
											"\r",
											"    pm.environment.set(\"_id_produto_carrinho_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para tentar excluir um produto que faz parte de um carrinho', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Não é permitido excluir produto que faz parte de carrinho');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade idCarrinho', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('idCarrinho');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade idCarrinho não está vazia', function () {\r",
											"    pm.expect(pm.response.json().idCarrinho).to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_carrinho_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_carrinho_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT054 - Exclusão de produto com parâmetro de _id vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/produtos/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CT055 - Exclusão de produto com parâmetro de _id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para produto não encontrado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Nenhum registro excluído');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/produtos/{{idRandom}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{idRandom}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT056 - Exclusão de produto como usuário não autenticado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto no carrinho para manipular\r",
											"pm.sendRequest({\r",
											"    url: 'https://compassuol.serverest.dev/carrinhos',\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    const jsonData = res.json();\r",
											"    const listaCarrinhos = jsonData.carrinhos;\r",
											"\r",
											"    if (!listaCarrinhos || listaCarrinhos.length === 0) {\r",
											"        return;\r",
											"    }\r",
											"    const carrinhoAleatorio = listaCarrinhos[Math.floor(Math.random() * listaCarrinhos.length)];\r",
											"    const listaProdutos = carrinhoAleatorio.produtos;\r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio].idProduto;\r",
											"\r",
											"    pm.environment.set(\"_id_produto_carrinho_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para usuário não autenticado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT057 - Exclusão de produto como usuário não administrador",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Cadastra um produto para excluir (caso ele não exista)\r",
											"const produto_para_excluir = {\r",
											"  \"nome\": \"Produto para excluir\",\r",
											"  \"preco\": 200,\r",
											"  \"descricao\": \"para teste\",\r",
											"  \"quantidade\": 20\r",
											"};\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { \r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
											"    }\r",
											"}, (errGet, resGet) => {\r",
											"    if (errGet) {\r",
											"        return;\r",
											"    }\r",
											"    const listaProdutos = resGet.json().produtos || [];\r",
											"    const produtoExistente = listaProdutos.find(p => p.nome === produto_para_excluir.nome);\r",
											"\r",
											"    if (produtoExistente) {\r",
											"        pm.environment.set(\"_id_produto_para_excluir\", produtoExistente._id);\r",
											"    } else {\r",
											"        pm.sendRequest({\r",
											"            url: `https://compassuol.serverest.dev/produtos`,\r",
											"            method: 'POST',\r",
											"            header: { \r",
											"                'Content-Type': 'application/json',\r",
											"                'Authorization': `Bearer ${pm.environment.get(\"access_token_adm\")}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify(produto_para_excluir)\r",
											"            }\r",
											"        }, (errPost, resPost) => {\r",
											"            if (errPost) {\r",
											"                return;\r",
											"            }\r",
											"            const resposta = resPost.json();\r",
											"            if (resposta._id) {\r",
											"                pm.environment.set(\"_id_produto_para_excluir\", resposta._id);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro de rota exclusiva para administrador', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Rota exclusiva para administradores');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url_base}}/produtos/{{_id_produto_para_manipular}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"produtos",
										"{{_id_produto_para_manipular}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "## **US 003: \\[API\\] Produtos**\n\nSendo um vendedor de uma loja com cadastro já realizado  \nGostaria de poder me autenticar e cadastrar produtos no Marketplace do ServeRest  \nPara poder cadastrar, editar, atualizar e excluir meus produtos\n\n**DoR**\n\n- Banco de dados e infraestrutura para desenvolvimento disponibilizados;\n    \n- API de cadastro de usuários implementada;\n    \n- API de autenticação implementada;\n    \n- Ambiente de testes disponibilizado.\n    \n\n**DoD**\n\n- CRUD de cadastro de Produtos implementado (CRIAR, ATUALIZAR, LISTAR E DELETAR);\n    \n- Análise de testes cobrindo a rota de produtos;\n    \n- Matriz de rastreabilidade atualizada;\n    \n- Automação de testes baseado na análise realizada;\n    \n\n**Acceptance Criteria**\n\n- Usuários não autenticados não devem conseguir realizar ações na rota de Produtos;\n    \n- Não deve ser possível realizar o cadastro de produtos com nomes já utilizados;\n    \n- Não deve ser possível excluir produtos que estão dentro de carrinhos (dependência API Carrinhos);\n    \n- Caso não exista produto com o ID informado na hora do UPDATE, um novo produto deverá ser criado;\n    \n- Produtos criados através do PUT não poderão ter nomes previamente cadastrados;\n    \n- Os testes executados deverão conter evidências;\n    \n- A cobertura de testes deve se basear no Swagger e ir além, cobrindo cenários alternativos."
		},
		{
			"name": "Testes Carrinhos",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "CT058 - Cadastro de carrinho com dados válidos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de dois produtos para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    let indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    let idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"\r",
											"    indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular2\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de cadastro realizado com sucesso', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se a propriedade _id não está vazia', function () {\r",
											"    pm.expect(pm.response.json()._id).to.not.be.empty;\r",
											"});\r",
											"\r",
											"//Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"produtos\"],\r",
											"    properties: {\r",
											"        produtos: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"                type: \"object\",\r",
											"                required: [\"idProduto\", \"quantidade\"],\r",
											"                properties: {\r",
											"                    idProduto: { type: \"string\" }, \r",
											"                    quantidade: { type: \"integer\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n      \"quantidade\": {{$randomInt}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular2}}\",\r\n      \"quantidade\": {{$randomInt}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT059 - Cadastro de carrinho com campos vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade produtos ou idProduto ou quantidade', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('produtos' || 'idProduto' || 'quantidade');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"\",\r\n      \"quantidade\": null\r\n    },\r\n    {\r\n      \"idProduto\": \"\",\r\n      \"quantidade\": null\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT060 - Cadastro de carrinho com _id de produto inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para produto não encontrado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Produto não encontrado');\r",
											"});\r",
											"\r",
											"//Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"produtos\"],\r",
											"    properties: {\r",
											"        produtos: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"                type: \"object\",\r",
											"                required: [\"idProduto\", \"quantidade\"],\r",
											"                properties: {\r",
											"                    idProduto: { type: \"string\" }, \r",
											"                    quantidade: { type: \"integer\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idRandom}}\",\r\n      \"quantidade\": {{$randomInt}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT061 - Cadastro de carrinho com produto duplicado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de um produto para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    const indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    const idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"        pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para produto duplicado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Não é permitido possuir produto duplicado');\r",
											"});\r",
											"\r",
											"//Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"produtos\"],\r",
											"    properties: {\r",
											"        produtos: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"                type: \"object\",\r",
											"                required: [\"idProduto\", \"quantidade\"],\r",
											"                properties: {\r",
											"                    idProduto: { type: \"string\" }, \r",
											"                    quantidade: { type: \"integer\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_adm}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT062 - Cadastro de mais de um carrinho para um usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de dois produtos para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    let indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    let idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"\r",
											"    indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular2\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para cadastro de mais de um carrinho por usuário', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Não é permitido ter mais de 1 carrinho');\r",
											"});\r",
											"\r",
											"//Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"produtos\"],\r",
											"    properties: {\r",
											"        produtos: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"                type: \"object\",\r",
											"                required: [\"idProduto\", \"quantidade\"],\r",
											"                properties: {\r",
											"                    idProduto: { type: \"string\" }, \r",
											"                    quantidade: { type: \"integer\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"produtos\": [\r\n            {\r\n                \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n                \"quantidade\": 2\r\n            },\r\n            {\r\n                \"idProduto\": \"{{_id_produto_para_manipular2}}\",\r\n                \"quantidade\": 5\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"produtos\": [\r\n            {\r\n                \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n                \"quantidade\": 2\r\n            },\r\n                {\r\n                \"idProduto\": \"{{_id_produto_para_manipular2}}\",\r\n                \"quantidade\": 5\r\n            }\r\n        ]\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT063 - Cadastro de carrinho com produto com quantidade inválida",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de dois produtos para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    let indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    let idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"\r",
											"    indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular2\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se há uma propriedade de erro na quantidade do segundo produto\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"produtos[1].quantidade\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se exibe uma mensagem de erro para a quantidade do produto\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('produtos[1].quantidade', 'produtos[1].quantidade deve ser um número positivo');\r",
											"});\r",
											"\r",
											"//Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"produtos\"],\r",
											"    properties: {\r",
											"        produtos: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"                type: \"object\",\r",
											"                required: [\"idProduto\", \"quantidade\"],\r",
											"                properties: {\r",
											"                    idProduto: { type: \"string\" }, \r",
											"                    quantidade: { type: \"integer\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n      \"quantidade\": 2\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular2}}\",\r\n      \"quantidade\": -1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "CT064 - Cadastro de carrinho como usuário não autenticado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Lógica para salvar um id de dois produtos para manipular\r",
											"pm.sendRequest({\r",
											"    url: `https://compassuol.serverest.dev/produtos`,\r",
											"    method: 'GET',\r",
											"    header: { 'Content-Type': 'application/json' }\r",
											"}, (err, res) => {\r",
											"    if (err) {\r",
											"        return;\r",
											"    }\r",
											"    const jsonData = res.json();\r",
											"    const listaProdutos = jsonData.produtos; \r",
											"    let indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    let idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular\", idAleatorio);\r",
											"\r",
											"    indiceAleatorio = Math.floor(Math.random() * listaProdutos.length);\r",
											"    idAleatorio = listaProdutos[indiceAleatorio]._id;\r",
											"    pm.environment.set(\"_id_produto_para_manipular2\", idAleatorio);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta possui a propriedade message', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se o corpo da resposta não possui a propriedade _id', function () {\r",
											"    pm.expect(pm.response.json()).to.not.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test('Verifica se é retornada uma mensagem de erro para usuário não autenticado', function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});\r",
											"\r",
											"//Teste de tipagem\r",
											"const Ajv = require('ajv');\r",
											"const ajv = new Ajv({ allErrors: true });\r",
											"\r",
											"const schema = {\r",
											"    type: \"object\",\r",
											"    required: [\"produtos\"],\r",
											"    properties: {\r",
											"        produtos: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"                type: \"object\",\r",
											"                required: [\"idProduto\", \"quantidade\"],\r",
											"                properties: {\r",
											"                    idProduto: { type: \"string\" }, \r",
											"                    quantidade: { type: \"integer\" }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let body = pm.request.body.raw;\r",
											"body = JSON.parse(body);\r",
											"\r",
											"const validate = ajv.compile(schema);\r",
											"const valid = validate(body);\r",
											"\r",
											"pm.test(\"Validação de tipagem do body enviado\", function () {\r",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular}}\",\r\n      \"quantidade\": {{$randomInt}}\r\n    },\r\n    {\r\n      \"idProduto\": \"{{_id_produto_para_manipular2}}\",\r\n      \"quantidade\": {{$randomInt}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/carrinhos",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "CT068 - Busca de carrinho com parâmetro de _id válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verifica se o status code é igual a 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se há uma propriedade message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica se exibe uma mensagem de erro para carrinho não encontrado\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message', 'Carrinho não encontrado');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/carrinhos/{{idRandom}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"carrinhos",
										"{{idRandom}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Operações de gerenciamento de carrinhos."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url_base",
			"value": "",
			"type": "string"
		}
	]
}