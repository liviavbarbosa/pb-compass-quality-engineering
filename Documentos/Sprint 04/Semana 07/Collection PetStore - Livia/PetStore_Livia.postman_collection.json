{
	"info": {
		"_postman_id": "a43bc7fe-3e74-42fe-b5bc-c47198969e67",
		"name": "PetStore_Livia",
		"description": "Essa coleção registra todos os testes realizados dos métodos POST para cadastro de usuários de maneira singular ou em lista, bem como do método DELETE para exclusão de usuários, da API PetStore.\n\nA versão utilizada nos testes foi a seguinte: [https://petstore3.swagger.io/api/v3](https://petstore3.swagger.io/api/v3/openapi.json)\n\nVale ressaltar que parte dos testes foram realizados por meio local com o auxílio da ferramente Docker.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44430224"
	},
	"item": [
		{
			"name": "Testes de Cadastro de Usuário",
			"item": [
				{
					"name": "Cadastro de usuário válido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta está em formato JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta não está vazia\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o usuário foi salvo chamando o endpoint GET\", function (done) {\r",
									"    const username = pm.response.json().username;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `https://petstore3.swagger.io/api/v3/user/${encodeURIComponent(username)}`,\r",
									"        method: 'GET',\r",
									"        header: { 'Content-Type': 'application/json' }\r",
									"    }, (err, res) => {\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"        pm.expect(res.json().username).to.eql(username);\r",
									"        done();\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Realiza um cadastro de usuário com dados na formatação e tipagem correta."
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário com campos vazios",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta não está vazia\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo id não está sendo salvo como null\", () => {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo userStatus não está sendo salvo como null\", () => {\r",
									"    pm.expect(pm.response.json().userStatus).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo username não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().username).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo firstName não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo lastName não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo  email não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo  password não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().password).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo phone não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().phone).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": null,\r\n  \"username\": \"\",\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"phone\": \"\",\r\n  \"userStatus\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Realiza um cadastro de usuário com campos sem valores."
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário com tipagem diferente da especificada",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta está em formato JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo id está sendo salvo como inteiro\", () => {\r",
									"    pm.expect(Number.isInteger(pm.response.json().id)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo userStatus está sendo salvo como inteiro\", () => {\r",
									"    pm.expect(Number.isInteger(pm.response.json().userStatus)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo username está sendo salvo como string\", () => {\r",
									"    pm.expect(typeof pm.response.json().username).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo firstName está sendo salvo como string\", () => {\r",
									"    pm.expect(typeof pm.response.json().firstName).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo lastName está sendo salvo como string\", () => {\r",
									"    pm.expect(typeof pm.response.json().lastName).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo email está sendo salvo como string\", () => {\r",
									"    pm.expect(typeof pm.response.json().email).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo password está sendo salvo como string\", () => {\r",
									"    pm.expect(typeof pm.response.json().password).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se o campo phone está sendo salvo como string\", () => {\r",
									"    pm.expect(typeof pm.response.json().phone).to.eql(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1\",\r\n  \"username\": 1,\r\n  \"firstName\": 2,\r\n  \"lastName\": 3,\r\n  \"email\": 4,\r\n  \"password\": 5,\r\n  \"phone\": 6,\r\n  \"userStatus\": \"100\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Realiza um cadastro de usuário com dados de tipagens diferentes das quais foram definidas."
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário com valores numéricos inválidos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta está em formato JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": -102,\r\n  \"username\": \"teste\",\r\n  \"firstName\": \"teste\",\r\n  \"lastName\": \"teste\",\r\n  \"email\": \"teste\",\r\n  \"password\": \"teste\",\r\n  \"phone\": \"teste\",\r\n  \"userStatus\": 3000000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Realiza um cadastro de usuário com valores numéricos além do que foi definido na documentação, como campos de tipo integer 64 com valor negativo e integer 32 com valor maior do que 32 bits."
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário com campos faltando",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta não está vazia\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo id não está sendo salvo como null\", () => {\r",
									"    pm.expect(pm.response.json().id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo userStatus não está sendo salvo como null\", () => {\r",
									"    pm.expect(pm.response.json().userStatus).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo username não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().username).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo firstName não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().firstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo lastName não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().lastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo  email não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().email).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo  password não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().password).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo phone não está sendo salvo como vazio\", () => {\r",
									"    pm.expect(pm.response.json().phone).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Realiza um cadastro de usuário sem campos com valores."
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário com inputs inválidos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta está em formato JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"@@$$#!!\",\r\n  \"username\": @@$$#!!,\r\n  \"firstName\": @@$$#!!,\r\n  \"lastName\": \"@@$$#!!\",\r\n  \"email\": @@$$#!!,\r\n  \"password\": \"@@$$#!!\",\r\n  \"phone\": \"@@$$#!!\",\r\n  \"userStatus\": @@$$#!!\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Realiza um cadastro de usuário com caracteres especiais nos campos da requisição."
					},
					"response": []
				}
			],
			"description": "**Regras de negócio:**\n\n- Essa funcionalidade só pode ser usada por um usuário logado.\n    \n\n**Estrutura de dados definida:**\n\n``` json\n{\n  \"id\": integer($int64),\n  \"username\": string,\n  \"firstName\": string,\n  \"lastName\": string,\n  \"email\": string,\n  \"password\": string,\n  \"phone\": string,\n  \"userStatus\": integer($int32)\n}\n\n ```\n\n**Respostas previstas:**\n\n- 200\n    \n- default"
		},
		{
			"name": "Testes de Cadastro de Lista de Usuários",
			"item": [
				{
					"name": "Cadastro de lista de usuários válidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta está em formato JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta não está vazia\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se todos os usuários retornados estão salvos no endpoint GET\", function (done) {\r",
									"    const usuarios = pm.response.json(); \r",
									"    let totalTestados = 0;\r",
									"\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.sendRequest({\r",
									"            url: `https://petstore3.swagger.io/api/v3/user/${encodeURIComponent(usuario.username)}`,\r",
									"            method: 'GET',\r",
									"            header: { 'Content-Type': 'application/json' }\r",
									"        }, (err, res) => {\r",
									"            pm.expect(res).to.have.property('code', 200);\r",
									"            pm.expect(res.json().username).to.eql(usuario.username);\r",
									"\r",
									"            totalTestados++;\r",
									"            if (totalTestados === usuarios.length) {\r",
									"                done(); \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n   \"id\": {{$randomInt}},\r\n   \"username\": \"{{$randomUserName}}\",\r\n   \"firstName\": \"{{$randomFirstName}}\",\r\n   \"lastName\": \"{{$randomLastName}}\",\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"password\": \"{{$randomPassword}}\",\r\n   \"phone\": \"{{$randomPhoneNumber}}\",\r\n   \"userStatus\": 1\r\n  },\r\n  {\r\n   \"id\": {{$randomInt}},\r\n   \"username\": \"{{$randomUserName}}\",\r\n   \"firstName\": \"{{$randomFirstName}}\",\r\n   \"lastName\": \"{{$randomLastName}}\",\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"password\": \"{{$randomPassword}}\",\r\n   \"phone\": \"{{$randomPhoneNumber}}\",\r\n   \"userStatus\": 1\r\n  },\r\n  {\r\n   \"id\": {{$randomInt}},\r\n   \"username\": \"{{$randomUserName}}\",\r\n   \"firstName\": \"{{$randomFirstName}}\",\r\n   \"lastName\": \"{{$randomLastName}}\",\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"password\": \"{{$randomPassword}}\",\r\n   \"phone\": \"{{$randomPhoneNumber}}\",\r\n   \"userStatus\": 1\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user/createWithList",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						},
						"description": "Cadastra uma lista de usuários com dados na formatação e tipagem correta."
					},
					"response": []
				},
				{
					"name": "Cadastro de lista com um usuário com campos vazios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta não está vazia\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"const usuarios = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verifica se o campo id não está sendo salvo como null\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.id).to.not.be.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo userStatus não está sendo salvo como null\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.userStatus).to.not.be.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo username não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.username).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo firstName não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.firstName).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo lastName não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.lastName).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo email não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.email).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo password não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.password).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo phone não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.phone).to.not.be.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n   \"id\": {{$randomInt}},\r\n   \"username\": \"{{$randomUserName}}\",\r\n   \"firstName\": \"{{$randomFirstName}}\",\r\n   \"lastName\": \"{{$randomLastName}}\",\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"password\": \"{{$randomPassword}}\",\r\n   \"phone\": \"{{$randomPhoneNumber}}\",\r\n   \"userStatus\": 1\r\n  },\r\n  {\r\n   \"id\": null,\r\n   \"username\": \"\",\r\n   \"firstName\": \"\",\r\n   \"lastName\": \"\",\r\n   \"email\": \"\",\r\n   \"password\": \"\",\r\n   \"phone\": \"\",\r\n   \"userStatus\": null\r\n  },\r\n  {\r\n   \"id\": {{$randomInt}},\r\n   \"username\": \"{{$randomUserName}}\",\r\n   \"firstName\": \"{{$randomFirstName}}\",\r\n   \"lastName\": \"{{$randomLastName}}\",\r\n   \"email\": \"{{$randomEmail}}\",\r\n   \"password\": \"{{$randomPassword}}\",\r\n   \"phone\": \"{{$randomPhoneNumber}}\",\r\n   \"userStatus\": 1\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user/createWithList",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						},
						"description": "Cadastra uma lista de usuários com campos sem valores."
					},
					"response": []
				},
				{
					"name": "Cadastro de lista de usuários com campos faltando",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a resposta não está vazia\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"const usuarios = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verifica se o campo id não está sendo salvo como null\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.id).to.not.be.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo userStatus não está sendo salvo como null\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.userStatus).to.not.be.null;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo username não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.username).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo firstName não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.firstName).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo lastName não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.lastName).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo email não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.email).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo password não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.password).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o campo phone não está sendo salvo como vazio\", () => {\r",
									"    usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario.phone).to.not.be.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/user/createWithList",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						},
						"description": "Cadastra uma lista de usuários sem campos com valores."
					},
					"response": []
				}
			],
			"description": "**Regras de negócio:**\n\nNão há regras de negócio especificadas na documentação.\n\n**Estrutura de dados definida:**\n\n``` json\n[\n  {\n   \"id\": integer($int64),\n   \"username\": string,\n   \"firstName\": string,\n   \"lastName\": string,\n   \"email\": string,\n   \"password\": string,\n   \"phone\": string,\n   \"userStatus\": integer($int32)\n  },\n  {\n   \"id\": integer($int64),\n   \"username\": string,\n   \"firstName\": string,\n   \"lastName\": string,\n   \"email\": string,\n   \"password\": string,\n   \"phone\": string,\n   \"userStatus\": integer($int32)\n  }\n]\n\n ```\n\n**Respostas previstas:**\n\n- 200\n    \n- default"
		},
		{
			"name": "Testes de Exclusão de Usuário",
			"item": [
				{
					"name": "Exclusão de usuário cadastrado préviamente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o usuário não existe no sistema chamando o endpoint GET\", function (done) {\r",
									"    const match = pm.request.url.toString().match(/\\/user\\/([^\\/\\?\\s]*)/);\r",
									"    const username = match ? match[1] : null;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `https://petstore3.swagger.io/api/v3/user/${encodeURIComponent(username)}`,\r",
									"        method: 'GET',\r",
									"        header: { 'Content-Type': 'application/json' }\r",
									"    }, (err, res) => {\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"        console.log(username);\r",
									"        done();\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/user/{{usuario_505}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								"{{usuario_505}}"
							]
						},
						"description": "Exclui um usuário que foi previamente cadastrado no sistema."
					},
					"response": []
				},
				{
					"name": "Exclusão de usuário deletado anteriormente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o usuário não existe no sistema chamando o endpoint GET\", function (done) {\r",
									"    const match = pm.request.url.toString().match(/\\/user\\/([^\\/\\?\\s]*)/);\r",
									"    const username = match ? match[1] : null;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `https://petstore3.swagger.io/api/v3/user/${encodeURIComponent(username)}`,\r",
									"        method: 'GET',\r",
									"        header: { 'Content-Type': 'application/json' }\r",
									"    }, (err, res) => {\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"        console.log(username);\r",
									"        done();\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/user/{{usuario_505}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								"{{usuario_505}}"
							]
						},
						"description": "Exclui um usuário que foi anteriormente excluído do sistema."
					},
					"response": []
				},
				{
					"name": "Exclusão de usuário não cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se o usuário não existe no sistema chamando o endpoint GET\", function (done) {\r",
									"    const match = pm.request.url.toString().match(/\\/user\\/([^\\/\\?\\s]*)/);\r",
									"    const username = match ? match[1] : null;\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `https://petstore3.swagger.io/api/v3/user/${encodeURIComponent(username)}`,\r",
									"        method: 'GET',\r",
									"        header: { 'Content-Type': 'application/json' }\r",
									"    }, (err, res) => {\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"        console.log(username);\r",
									"        done();\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/user/{{usuario_nao_cadastrado}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								"{{usuario_nao_cadastrado}}"
							]
						},
						"description": "Exclui um usuário que não foi previamente cadastrado no sistema."
					},
					"response": []
				},
				{
					"name": "Exclusão de usuário vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica se o status code é 405\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"user",
								""
							]
						},
						"description": "Exclui um usuário com username vazio."
					},
					"response": []
				}
			],
			"description": "**Regras de negócio:**\n\n- Essa funcionalidade só pode ser usada por um usuário logado.\n    \n\n**Parâmetros necessários:**\n\n- username (nome do usuário)\n    \n\n**Respostas previstas:**\n\n- 200\n    \n- 400\n    \n- 404\n    \n- default"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url_base",
			"value": "",
			"type": "string"
		}
	]
}